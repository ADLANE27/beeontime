
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get environment variables
    const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';

    // Initialize Supabase client with service role key for admin privileges
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Parse request body
    const { employeeData } = await req.json();
    
    if (!employeeData || !employeeData.email || !employeeData.password) {
      return new Response(
        JSON.stringify({ success: false, message: "Données d'employé invalides" }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    console.log("Création d'un nouvel employé:", employeeData.email);
    
    // 1. Check if a user with this email already exists
    const { data: existingUsers, error: queryError } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', employeeData.email);
    
    if (queryError) {
      console.error("Erreur lors de la vérification de l'utilisateur:", queryError);
      return new Response(
        JSON.stringify({ success: false, message: `Erreur de vérification: ${queryError.message}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }
    
    if (existingUsers && existingUsers.length > 0) {
      return new Response(
        JSON.stringify({ success: false, message: `Un utilisateur avec l'email ${employeeData.email} existe déjà` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    // 2. Create user in Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: employeeData.email,
      password: employeeData.password,
      email_confirm: true, // Auto-confirm email
      user_metadata: {
        first_name: employeeData.first_name,
        last_name: employeeData.last_name,
      },
    });

    if (authError || !authData.user) {
      console.error("Erreur lors de la création du compte:", authError);
      return new Response(
        JSON.stringify({ success: false, message: `Erreur d'authentification: ${authError?.message}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    // Get the user ID generated by Supabase Auth
    const userId = authData.user.id;
    
    // 3. Update the profile with employee role
    const { error: profileError } = await supabase
      .from('profiles')
      .update({ role: 'employee' })
      .eq('id', userId);
    
    if (profileError) {
      console.error("Erreur lors de la mise à jour du profil:", profileError);
      // Continue anyway as this is not critical
    }

    // 4. Create employee record in employees table
    const { error: employeeError } = await supabase
      .from('employees')
      .insert({
        id: userId,
        ...employeeData
      });

    if (employeeError) {
      console.error("Erreur lors de la création de l'employé:", employeeError);
      
      // If employee creation fails, try to delete the auth user to avoid orphaned accounts
      try {
        await supabase.auth.admin.deleteUser(userId);
      } catch (cleanupError) {
        console.error("Erreur lors du nettoyage de l'utilisateur après échec:", cleanupError);
      }
      
      return new Response(
        JSON.stringify({ success: false, message: `Erreur d'insertion d'employé: ${employeeError.message}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    // Success - return the created user
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: "Employé créé avec succès",
        user: {
          id: userId,
          email: employeeData.email
        }
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 }
    );

  } catch (error) {
    console.error("Erreur lors de la création de l'employé:", error);
    
    return new Response(
      JSON.stringify({ success: false, message: `Erreur interne: ${error.message}` }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
